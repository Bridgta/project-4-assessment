{"version":3,"sources":["components/CircleSelector/CircleSelector.jsx","components/Circles/Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","className","name","this","props","selected","onClick","handleClick","Component","Circles","App","e","setState","target","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAoDeA,G,uLA/CP,OACI,yBAAKC,UAAU,kBACX,4BACIC,KAAK,UACLD,UAC4B,YAAxBE,KAAKC,MAAMC,SAAyB,WAAa,GAErDC,QAASH,KAAKC,MAAMG,aAEnB,IAPL,YAUA,4BACIL,KAAK,UACLD,UAC4B,YAAxBE,KAAKC,MAAMC,SAAyB,WAAa,GAErDC,QAASH,KAAKC,MAAMG,aAEnB,IAPL,YAUA,4BACIL,KAAK,UACLD,UAC4B,YAAxBE,KAAKC,MAAMC,SAAyB,WAAa,GAErDC,QAASH,KAAKC,MAAMG,aAEnB,IAPL,YAUA,4BACIL,KAAK,UACLD,UAC4B,YAAxBE,KAAKC,MAAMC,SAAyB,WAAa,GAErDC,QAASH,KAAKC,MAAMG,aAEnB,IAPL,iB,GAlCaC,cCqCdC,G,uLAnCP,OACI,yBAAKR,UAAU,WACX,yBACIA,UAC4B,YAAxBE,KAAKC,MAAMC,SAAyB,WAAa,IAFzD,MAKQ,KAER,yBACIJ,UAC4B,YAAxBE,KAAKC,MAAMC,SAAyB,WAAa,IAFzD,OAOA,yBACIJ,UAC4B,YAAxBE,KAAKC,MAAMC,SAAyB,WAAa,IAFzD,QAKU,KAEV,yBACIJ,UAC4B,YAAxBE,KAAKC,MAAMC,SAAyB,WAAa,IAFzD,OAKS,U,GA9BHG,cCgCPE,G,kBA7BX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KAMVG,YAAc,SAAAI,GACV,EAAKC,SAAS,CACVP,SAAUM,EAAEE,OAAOX,QAPvB,EAAKY,MAAQ,CACTT,SAAU,WAHC,E,oEAaZD,GACH,OACI,yBAAKH,UAAU,OACX,4BAAQA,UAAU,cAAlB,2BACA,8BACI,kBAAC,EAAD,CACII,SAAUF,KAAKW,MAAMT,SACrBE,YAAaJ,KAAKI,cAEtB,kBAAC,EAAD,CAASF,SAAUF,KAAKW,MAAMT,iB,GAvBhCG,cCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d020f28c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./CircleSelector.css\";\n\nclass CircleSelector extends Component {\n    render() {\n        return (\n            <div className=\"CircleSelector\">\n                <button\n                    name=\"circle1\"\n                    className={\n                        this.props.selected === \"circle1\" ? \"selected\" : \"\"\n                    }\n                    onClick={this.props.handleClick}\n                >\n                    {\" \"}\n                    Circle 1\n                </button>\n                <button\n                    name=\"circle2\"\n                    className={\n                        this.props.selected === \"circle2\" ? \"selected\" : \"\"\n                    }\n                    onClick={this.props.handleClick}\n                >\n                    {\" \"}\n                    Circle 2\n                </button>\n                <button\n                    name=\"circle3\"\n                    className={\n                        this.props.selected === \"circle3\" ? \"selected\" : \"\"\n                    }\n                    onClick={this.props.handleClick}\n                >\n                    {\" \"}\n                    Circle 3\n                </button>\n                <button\n                    name=\"circle4\"\n                    className={\n                        this.props.selected === \"circle4\" ? \"selected\" : \"\"\n                    }\n                    onClick={this.props.handleClick}\n                >\n                    {\" \"}\n                    Circle 4\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default CircleSelector;\n\n{\n    /* <div className={<conditional expression> ? 'name-of-class' : ''}></conditional> */\n}\n","import React, { Component } from \"react\";\nimport \"./Circles.css\";\n\nclass Circles extends Component {\n    render() {\n        return (\n            <div className=\"Circles\">\n                <div\n                    className={\n                        this.props.selected === \"circle1\" ? \"selected\" : \"\"\n                    }\n                >\n                    One{\" \"}\n                </div>\n                <div\n                    className={\n                        this.props.selected === \"circle2\" ? \"selected\" : \"\"\n                    }\n                >\n                    Two\n                </div>\n                <div\n                    className={\n                        this.props.selected === \"circle3\" ? \"selected\" : \"\"\n                    }\n                >\n                    Three{\" \"}\n                </div>\n                <div\n                    className={\n                        this.props.selected === \"circle4\" ? \"selected\" : \"\"\n                    }\n                >\n                    Four{\" \"}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Circles;\n","import React, { Component } from \"react\";\nimport CircleSelector from \"./components/CircleSelector/CircleSelector\";\nimport Circles from \"./components/Circles/Circles\";\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: \"Circle1\"\n        };\n    }\n\n    handleClick = e => {\n        this.setState({\n            selected: e.target.name\n        });\n    };\n\n    render(props) {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n                <main>\n                    <CircleSelector\n                        selected={this.state.selected}\n                        handleClick={this.handleClick}\n                    />\n                    <Circles selected={this.state.selected} />\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}